{
  
    
        "post0": {
            "title": "Grouping custom scripts in windows right click contextmenu",
            "content": "Grouping custom scripts in windows right click contextmenu . The problem . One fine boring day, I was cleaning unnecessary files in my PC and realized that there are too many empty folders. Digging around my python scripts folders, I realized that once upon a time I wrote a script to clean empty folders. The script takes a directory path as an argument. But copying the directory path, launching the cmd prompt, and passing the directory path to the script is a waste of time. While I was tinkering about a solution, I right-clicked on the folder and thought if only there is a menu item “Clean empty folders” that can run my script, that will solve my problem. . Finding the solution . The next moment, I stopped deleting files and instead started searching on google about “Adding python scripts to the Windows context menu”. I found a few tutorials and understood that adding items to the context menu requires creating keys in the windows registry. But thanks to the complexity of the Windows, the soutions I found seemed to be quite complex or less informative. While most of the tutorials focused on adding single item to the context menu, grouping items into a folder like structure is still not an intuitive step. It took me some experimentation and time to figure out how Windows actually deals with the registry keys when it comes to context menu. . There are atleast 15 registry keys where you can add context menu items. . {BASE_ROOT} Directory shell - to displays items when right click on a directory | {BASE_ROOT} Drive shell - to displays items when right click on a drive | {BASE_ROOT} Directory Background shell - to displays items when right click on empty space in the file explorer | {BASE_ROOT} * shell - to displays items when right click on any file(s) | {BASE_ROOT} SystemFileAssociations {FILE_TYPE} shell - to displays items when right click on a FILE_TYPE file type | {BASE_ROOT} DesktopBackground shell - to displays items when right click on desktop background | where BASE_ROOT can be HKEY_CLASSES_ROOT, HKEY_CURRENT_USER Software Classes or HKEY_LOCAL_MACHINE SOFTWARE Classes. For adding items to all users HKEY_CLASSES_ROOT is used, and for adding items to the current user HKEY_CURRENT_USER Software Classes is used. . Now, each item in the context menu is associated with the following information. . Description of the item to be displayed on the context menu | Registry key associated with the item | Command to be executed | [Optional] Path to an icon | For grouping items into a folder like structure, the above details are required for each item along with . Name of the group | Registry key associated with the group | [Optional] Path to an icon | The structure of the registry keys and values for a single item is shown below. . ROOT ITEM_REG_KEY = (Default) = Name of the item = Icon = Path to an icon command = (Default) = Command . For a group of context menu items, the registry structure looks as follows. . ROOT GROUP_REG_KEY = MUIVerb = Group name = Icon = Path to an icon = Subcommands = Shell ITEM1_REG_KEY = (Default) = Name of the item1 = Icon = Path to an icon command = (Default) = Command1 ITEM2_REG_KEY = (Default) = Name of the item2 = Icon = Path to an icon command = (Default) = Command2 SUBGROUP_REG_KEY = MUIVerb = Subgroup name = Icon = Path to an icon = Subcommands = Shell ITEM1_REG_KEY = (Default) = Name of the item1 = Icon = Path to an icon command = (Default) = Command1 ... ... . Implementation . Test implementation . Let us first implement a simple script to add a menu item group “Group 1” and a two items “Item 1” and “Item 2” to the group. For adding registry keys we use python’s winreg library. First we import the required functions from the winreg library. . # Import required functions from winreg import ( CreateKey, # for creating/opening keys SetValue, # for setting a key value SetValueEx, # for storing key/value data HKEY_CURRENT_USER, REG_SZ, # to set value as a string CloseKey ) . Then we create the group registry key for the current user. . # create the group registry key group_reg_key_str = r&quot;Software Classes Directory Background shell Group1 &quot; group_reg_key = CreateKey(HKEY_CURRENT_USER, group_reg_key_str) # Create a key &#39;MUIVerb&#39; and add &#39;Group 1&#39; as value. # &#39;Group 1&#39; is shown in the conextmenu SetValueEx(group_reg_key, &#39;MUIVerb&#39;, 0, REG_SZ, &quot;Group 1&quot;) # Create a key &#39;SubCommands&#39; SetValueEx(group_reg_key, &#39;SubCommands&#39;, 0, REG_SZ, &#39;&#39;) # Create sub key &quot;shell&quot; for adding items subcommands_key = CreateKey(group_reg_key, &#39;shell&#39;) . When you run this script it will create the group named “Group 1” in the context menu. But we haven’t added any items to that list. Let’s continue and add two items. . # Create item1 key item1_key = CreateKey(subcommands_key, &#39;item1&#39;) # Set item name SetValue(item1_key, &#39;&#39;, REG_SZ, &quot;Item 1&quot;) # Create command key and add the command SetValue(item1_key, &#39;command&#39;, REG_SZ, &#39;cmd.exe&#39;) CloseKey(item1_key) # Create item2 key item2_key = CreateKey(subcommands_key, &#39;item2&#39;) # Set item name SetValue(item2_key, &#39;&#39;, REG_SZ, &quot;Item 2&quot;) # Create command key and add the command SetValue(item2_key, &#39;command&#39;, REG_SZ, &#39;cmd.exe&#39;) CloseKey(item2_key) CloseKey(subcommands_key) CloseKey(group_reg_key) . Now, after running the complete script you’ll get the following output. . . Open the registry editor and go to HKEY_CURRENT_USER Software Classes Directory Background shell Group1 shell . You’ll see the following structure corresponding to the context menu group we’ve created. . . :smiley: :star2: :clap: we did it. The complete script can be found at this link. .",
            "url": "https://naninaveen.github.io/naninaveen/python/organizing-windows-contextmenu/",
            "relUrl": "/python/organizing-windows-contextmenu/",
            "date": " • Aug 30, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://naninaveen.github.io/naninaveen/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://naninaveen.github.io/naninaveen/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Welcome to Random Programming Stuff. . . Here you’ll find some random programming articles on various topics such as python programming tips, web design, web scraping, working with useful python libraries etc. Most of the posts will be about solving a well known problem, and some posts on solving problems which are not at all problems. . About me . I’m a self-taught programmer who :heart: to code. Most of the times I reimplement the things which I’m fascinated about but also things which I feel can be done better. I believe that learning stays with you longer when you learn out of necessity and curiosity. . Here&#39;s a random XKCD comic for you. . © Naveen Namani . This website is powered by fastpages .",
          "url": "https://naninaveen.github.io/naninaveen/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://naninaveen.github.io/naninaveen/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}